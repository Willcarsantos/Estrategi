(function() {
  let clickCount = 0;

  document.addEventListener('click', () => {
    clickCount++;
    if (clickCount === 2) {
      fetch('https://raw.githubusercontent.com/Willcarsantos/Estrategi/main/Analise-estrategias')
        .then(response => response.text())
        .then(script => {
          const scriptElement = document.createElement('script');
          scriptElement.text = script;
          document.body.appendChild(scriptElement);

          // Adicionando lógica do e-book
          const analyzeGame = () => {
            // Supondo que os dados do jogo estão disponíveis em uma variável "gameData"
            const gameData = getGameData(); // Você precisa definir como obter os dados do jogo

            const vermelho = gameData.vermelho;
            const branco = gameData.branco;
            const preto = gameData.preto;

            // Exemplo de análise simples baseado em "VALOR DA APOSTA"
            let betColor;
            if (vermelho * 2 < branco * 14 && vermelho * 2 < preto * 2) {
              // Apostar no vermelho
              betColor = 'vermelho';
            } else if (preto * 2 < branco * 14 && preto * 2 < vermelho * 2) {
              // Apostar no preto
              betColor = 'preto';
            }

            // Análise de sequências
            const lastResults = gameData.lastResults; // Array com os últimos resultados do jogo
            const consecutiveColors = getConsecutiveColors(lastResults);
            if (consecutiveColors.length >= 4) {
              // Se houver 4 ou mais cores consecutivas iguais, esperar
              console.log('Esperar, sequência suspeita detectada.');
              betColor = 'esperar';
            } else {
              // Continuar análise e apostas
              betColor = analyzeSequences(lastResults) || betColor;
            }

            // Calcula a % de acerto da estratégia
            calculateSuccessRate(betColor, lastResults);
          };

          const getGameData = () => {
            // Implementar a lógica para obter os dados do jogo
            // Isso é apenas um exemplo, você precisará ajustar de acordo com a estrutura real dos dados
            return {
              vermelho: Math.random(),
              branco: Math.random(),
              preto: Math.random(),
              lastResults: ['vermelho', 'preto', 'vermelho', 'preto', 'branco'] // Exemplo de resultados
            };
          };

          const getConsecutiveColors = (results) => {
            let count = 1;
            const consecutive = [];
            for (let i = 1; i < results.length; i++) {
              if (results[i] === results[i - 1]) {
                count++;
              } else {
                if (count >= 4) {
                  consecutive.push({ color: results[i - 1], count });
                }
                count = 1;
              }
            }
            return consecutive;
          };

          const analyzeSequences = (results) => {
            // Implementar análise de sequências como descrito no e-book
            // Exemplos de sequências:
            // 3 2 1, Reflexo Invertido, Zig Zag
            // Supondo que você tenha funções para identificar essas sequências
            if (isSequence321(results)) {
              return 'vermelho';
            } else if (isReflectInverse(results)) {
              return 'preto';
            } else if (isZigZag(results)) {
              return 'branco';
            }
            return null;
          };

          const placeBet = (color, successRate) => {
            console.log(`Apostando no ${color} com taxa de sucesso de ${successRate.toFixed(2)}%`);
            alert(`Apostar no ${color} com taxa de sucesso de ${successRate.toFixed(2)}%`);
          };

          // Funções fictícias para identificar sequências
          const isSequence321 = (results) => {
            // Implementar lógica para identificar sequência 3 2 1
            // Exemplo simplificado:
            return results.slice(-3).join('') === '321';
          };

          const isReflectInverse = (results) => {
            // Implementar lógica para identificar sequência Reflexo Invertido
            // Exemplo simplificado:
            return results.slice(-2).join('') === '21';
          };

          const isZigZag = (results) => {
            // Implementar lógica para identificar sequência Zig Zag
            // Exemplo simplificado:
            return results.slice(-3).every((val, i) => val !== results.slice(-3)[(i + 1) % 3]);
          };

          const calculateSuccessRate = (betColor, results) => {
            // Implemente a lógica para calcular a porcentagem de acertos com base nos resultados fornecidos
            // Vamos obter os dados do site Tipminer e calcular a taxa de sucesso

            fetch('https://www.tipminer.com/historico/blaze/double?subject=filter&limit=3000&t=1720802159544')
              .then(response => response.json())
              .then(data => {
                let successCount = 0;
                let totalCount = data.length;

                data.forEach(result => {
                  if (result.predictedColor === betColor && result.predictedColor === result.actualColor) {
                    successCount++;
                  }
                });

                let successRate = (successCount / totalCount) * 100;
                placeBet(betColor, successRate);
              })
              .catch(err => console.error('Erro ao carregar os dados:', err));
          };

          // Chamar função de análise
          analyzeGame();
        })
        .catch(err => console.error('Erro ao carregar o script:', err));
    }
  });
})();
